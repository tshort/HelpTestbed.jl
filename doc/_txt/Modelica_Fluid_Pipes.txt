Modelica.Fluid.Pipes



Modelica.Fluid.Pipes
====================

Devices for conveying fluid

Information
-----------

::

::

Extends from Modelica.Icons.VariantsPackage (Icon for package containing
variants).

Package Content
---------------

  ------------------------------------------------------------------------
  Name                                      Description
  ----------------------------------------- ------------------------------
  [image3] StaticPipe                       Basic pipe flow model without
                                            storage of mass or energy

  [image4] DynamicPipe                      Dynamic pipe model with
                                            storage of mass and energy

  [image5] BaseClasses                      Base classes used in the Pipes
                                            package (only of interest to
                                            build new component models)
  ------------------------------------------------------------------------

* * * * *

[image6] Modelica.Fluid.Pipes.StaticPipe
========================================

Basic pipe flow model without storage of mass or energy

Information
-----------

::

Model of a straight pipe with constant cross section and with
steady-state mass, momentum and energy balances, i.e., the model does
not store mass or energy. There exist two thermodynamic states, one at
each fluid port. The momentum balance is formulated for the two states,
taking into account momentum flows, friction and gravity. The same
result can be obtained by using DynamicPipe with steady-state dynamic
settings. The intended use is to provide simple connections of vessels
or other devices with storage, as it is done in:

-   Examples.Tanks.EmptyTanks
-   Examples.InverseParameterization

Numerical Issues

With the stream connectors the thermodynamic states on the ports are
generally defined by models with storage or by sources placed upstream
and downstream of the static pipe. Other non storage components in the
flow path may yield to state transformation. Note that this generally
leads to nonlinear equation systems if multiple static pipes, or other
flow models without storage, are directly connected.

::

Extends from Modelica.Fluid.Pipes.BaseClasses.PartialStraightPipe (Base
class for straight pipe models).

Parameters
----------

  -------------------------------------------------------------------------
  Type                    Name                     Default Description
  ----------------------- ------------------------ ------- ----------------
  replaceable package     PartialMedium            Medium  
  Medium                                           in the  
                                                   compone 
                                                   nt      

  Geometry                                                 

  Real                    nParallel                1       Number of
                                                           identical
                                                           parallel pipes

  Length                  length                           Length [m]

  Boolean                 isCircular               true    = true if cross
                                                           sectional area
                                                           is circular

  Diameter                diameter                         Diameter of
                                                           circular pipe
                                                           [m]

  Area                    crossArea                Modelic Inner cross
                                                   a.Const section area
                                                   ants.pi [m2]
                                                   *diamet 
                                                   ...     

  Length                  perimeter                Modelic Inner perimeter
                                                   a.Const [m]
                                                   ants.pi 
                                                   *diamet 
                                                   er      

  Height                  roughness                2.5e-5  Average height
                                                           of surface
                                                           asperities
                                                           (default: smooth
                                                           steel pipe) [m]

  Static head                                              

  Length                  height_ab                0       Height(port_b) -
                                                           Height(port_a)
                                                           [m]

  Pressure loss                                            

  replaceable model       DetailedPipeFlow         Wall    
  FlowModel                                        frictio 
                                                   n,      
                                                   gravity 
                                                   ,       
                                                   momentu 
                                                   m       
                                                   flow    

  Assumptions                                              

  Boolean                 allowFlowReversal        system. = true to allow
                                                   allowFl flow reversal,
                                                   owRever false restricts
                                                   sal     to design
                                                           direction
                                                           (port_a ->
                                                           port_b)

  Initialization                                           

  AbsolutePressure        p_a_start                system. Start value of
                                                   p_start pressure at port
                                                           a [Pa]

  AbsolutePressure        p_b_start                p_a_sta Start value of
                                                   rt      pressure at port
                                                           b [Pa]

  MassFlowRate            m_flow_start             system. Start value for
                                                   m_flow_ mass flow rate
                                                   start   [kg/s]
  -------------------------------------------------------------------------

Connectors
----------

  ------------------------------------------------------------------------
  Type                                Name Description
  ----------------------------------- ---- -------------------------------
  FluidPort_a                         port Fluid connector a (positive
                                      _a   design flow direction is from
                                           port_a to port_b)

  FluidPort_b                         port Fluid connector b (positive
                                      _b   design flow direction is from
                                           port_a to port_b)
  ------------------------------------------------------------------------

Modelica definition
-------------------

    model StaticPipe 
      "Basic pipe flow model without storage of mass or energy"

      // extending PartialStraightPipe
      extends Modelica.Fluid.Pipes.BaseClasses.PartialStraightPipe;

      // Initialization
      parameter Medium.AbsolutePressure p_a_start=system.p_start 
        "Start value of pressure at port a";
      parameter Medium.AbsolutePressure p_b_start=p_a_start 
        "Start value of pressure at port b";
      parameter Medium.MassFlowRate m_flow_start = system.m_flow_start 
        "Start value for mass flow rate";

      FlowModel flowModel(
              redeclare final package Medium = Medium,
              final n=2,
              states={Medium.setState_phX(port_a.p, inStream(port_a.h_outflow), inStream(port_a.Xi_outflow)),
                     Medium.setState_phX(port_b.p, inStream(port_b.h_outflow), inStream(port_b.Xi_outflow))},
              vs={port_a.m_flow/Medium.density(flowModel.states[1])/flowModel.crossAreas[1],
                  -port_b.m_flow/Medium.density(flowModel.states[2])/flowModel.crossAreas[2]}/nParallel,
              final momentumDynamics=Types.Dynamics.SteadyState,
              final allowFlowReversal=allowFlowReversal,
              final p_a_start=p_a_start,
              final p_b_start=p_b_start,
              final m_flow_start=m_flow_start,
              final nParallel=nParallel,
              final pathLengths={length},
              final crossAreas={crossArea, crossArea},
              final dimensions={4*crossArea/perimeter, 4*crossArea/perimeter},
              final roughnesses={roughness, roughness},
              final dheights={height_ab},
              final g=system.g) "Flow model";
    equation 
      // Mass balance
      port_a.m_flow = flowModel.m_flows[1];
      0 = port_a.m_flow + port_b.m_flow;
      port_a.Xi_outflow = inStream(port_b.Xi_outflow);
      port_b.Xi_outflow = inStream(port_a.Xi_outflow);
      port_a.C_outflow = inStream(port_b.C_outflow);
      port_b.C_outflow = inStream(port_a.C_outflow);

      // Energy balance, considering change of potential energy
      // Wb_flow = v*A*dpdx + v*F_fric
      //         = m_flow/d/A * (A*dpdx + A*pressureLoss.dp_fg - F_grav)
      //         = m_flow/d/A * (-A*g*height_ab*d)
      //         = -m_flow*g*height_ab
      port_b.h_outflow = inStream(port_a.h_outflow) - system.g*height_ab;
      port_a.h_outflow = inStream(port_b.h_outflow) + system.g*height_ab;

    end StaticPipe;

* * * * *

[image7] Modelica.Fluid.Pipes.DynamicPipe
=========================================

Dynamic pipe model with storage of mass and energy

Information
-----------

::

Model of a straight pipe with distributed mass, energy and momentum
balances. It provides the complete balance equations for one-dimensional
fluid flow as formulated in
UsersGuide.ComponentDefinition.BalanceEquations.

The partial differential equations are treated with the finite volume
method and a staggered grid scheme for momentum balances. The pipe is
split into nNodes equally spaced segments along the flow path. The
default value is nNodes=2. This results in two lumped mass and energy
balances and one lumped momentum balance across the dynamic pipe.

Note that this generally leads to high-index DAEs for pressure states if
dynamic pipes are directly connected to each other, or generally to
models with storage exposing a thermodynamic state through the port.
This may not be valid if the dynamic pipe is connected to a model with
non-differentiable pressure, like a Sources.Boundary_pT with prescribed
jumping pressure. The modelStructure can be configured as appropriate in
such situations, in order to place a momentum balance between a pressure
state of the pipe and a non-differentiable boundary condition.

The default modelStructure is av_vb (see Advanced tab). The simplest
possible alternative symetric configuration, avoiding potential
high-index DAEs at the cost of the potential introduction of nonlinear
equation systems, is obtained with the setting
nNodes=1, modelStructure=a_v_b. Depending on the configured model
structure, the first and the last pipe segment, or the flow path length
of the first and the last momentum balance, are of half size. See the
documentation of the base class Pipes.BaseClasses.PartialTwoPortFlow,
also covering asymmetric configurations.

The HeatTransfer component specifies the source term Qb_flows of the
energy balance. The default component uses a constant coefficient for
the heat transfer between the bulk flow and the segment boundaries
exposed through the heatPorts. The HeatTransfer model is replaceable and
can be exchanged with any model extended from
BaseClasses.HeatTransfer.PartialFlowHeatTransfer.

The intended use is for complex networks of pipes and other flow
devices, like valves. See e.g.

-   Examples.BranchingDynamicPipes, or
-   Examples.IncompressibleFluidNetwork.

::

Extends from Modelica.Fluid.Pipes.BaseClasses.PartialStraightPipe (Base
class for straight pipe models), BaseClasses.PartialTwoPortFlow (Base
class for distributed flow models).

Parameters
----------

  -------------------------------------------------------------------------
  Type                    Name                     Default Description
  ----------------------- ------------------------ ------- ----------------
  replaceable package     PartialMedium            Medium  
  Medium                                           in the  
                                                   compone 
                                                   nt      

  Geometry                                                 

  Real                    nParallel                1       Number of
                                                           identical
                                                           parallel pipes

  Length                  length                           Length [m]

  Boolean                 isCircular               true    = true if cross
                                                           sectional area
                                                           is circular

  Diameter                diameter                         Diameter of
                                                           circular pipe
                                                           [m]

  Area                    crossArea                Modelic Inner cross
                                                   a.Const section area
                                                   ants.pi [m2]
                                                   *diamet 
                                                   ...     

  Length                  perimeter                Modelic Inner perimeter
                                                   a.Const [m]
                                                   ants.pi 
                                                   *diamet 
                                                   er      

  Height                  roughness                2.5e-5  Average height
                                                           of surface
                                                           asperities
                                                           (default: smooth
                                                           steel pipe) [m]

  Length                  lengths[n]               if n == lengths of flow
                                                   1 then  segments [m]
                                                   {length 
                                                   }       
                                                   else... 

  Area                    crossAreas[n]            fill(cr cross flow areas
                                                   ossArea of flow segments
                                                   ,       [m2]
                                                   n)      

  Length                  dimensions[n]            fill(4* hydraulic
                                                   crossAr diameters of
                                                   ea/peri flow segments
                                                   meter,  [m]
                                                   n)      

  Height                  roughnesses[n]           fill(ro Average heights
                                                   ughness of surface
                                                   ,       asperities [m]
                                                   n)      

  Static head                                              

  Length                  height_ab                0       Height(port_b) -
                                                           Height(port_a)
                                                           [m]

  Length                  dheights[n]              height_ Differences in
                                                   ab*dxs  heigths of flow
                                                           segments [m]

  Pressure loss                                            

  replaceable model       DetailedPipeFlow         Wall    
  FlowModel                                        frictio 
                                                   n,      
                                                   gravity 
                                                   ,       
                                                   momentu 
                                                   m       
                                                   flow    

  Assumptions                                              

  Boolean                 allowFlowReversal        system. = true to allow
                                                   allowFl flow reversal,
                                                   owRever false restricts
                                                   sal     to design
                                                           direction
                                                           (port_a ->
                                                           port_b)

  Dynamics                                                 

  Dynamics                energyDynamics           system. Formulation of
                                                   energyD energy balances
                                                   ynamics 

  Dynamics                massDynamics             system. Formulation of
                                                   massDyn mass balances
                                                   amics   

  Dynamics                momentumDynamics         system. Formulation of
                                                   momentu momentum
                                                   mDynami balances
                                                   cs      

  Heat transfer                                            

  Boolean                 use_HeatTransfer         false   = true to use
                                                           the HeatTransfer
                                                           model

  Initialization                                           

  AbsolutePressure        p_a_start                system. Start value of
                                                   p_start pressure at port
                                                           a [Pa]

  AbsolutePressure        p_b_start                p_a_sta Start value of
                                                   rt      pressure at port
                                                           b [Pa]

  Boolean                 use_T_start              true    Use T_start if
                                                           true, otherwise
                                                           h_start

  Temperature             T_start                  if      Start value of
                                                   use_T_s temperature [K]
                                                   tart    
                                                   then    
                                                   system. 
                                                   T...    

  SpecificEnthalpy        h_start                  if      Start value of
                                                   use_T_s specific
                                                   tart    enthalpy [J/kg]
                                                   then    
                                                   Medium. 
                                                   s...    

  MassFraction            X_start[Medium.nX]       Medium. Start value of
                                                   X_defau mass fractions
                                                   lt      m_i/m [kg/kg]

  ExtraProperty           C_start[Medium.nC]       fill(0, Start value of
                                                   Medium. trace substances
                                                   nC)     

  MassFlowRate            m_flow_start             system. Start value for
                                                   m_flow_ mass flow rate
                                                   start   [kg/s]

  Advanced                                                 

  Integer                 nNodes                   2       Number of
                                                           discrete flow
                                                           volumes

  ModelStructure          modelStructure           Types.M Determines
                                                   odelStr whether flow or
                                                   ucture. volume models
                                                   av_vb   are present at
                                                           the ports

  Boolean                 useLumpedPressure        false   =true to lump
                                                           pressure states
                                                           together

  Boolean                 useInnerPortProperties   false   =true to take
                                                           port properties
                                                           for flow models
                                                           from internal
                                                           control volumes
  -------------------------------------------------------------------------

Connectors
----------

  -------------------------------------------------------------------------
  Type                              Name     Description
  --------------------------------- -------- ------------------------------
  FluidPort_a                       port_a   Fluid connector a (positive
                                             design flow direction is from
                                             port_a to port_b)

  FluidPort_b                       port_b   Fluid connector b (positive
                                             design flow direction is from
                                             port_a to port_b)

  HeatPorts_a                       heatPort 
                                    s[nNodes 
                                    ]        
  -------------------------------------------------------------------------

Modelica definition
-------------------

    model DynamicPipe 
      "Dynamic pipe model with storage of mass and energy"

      import Modelica.Fluid.Types.ModelStructure;

      // extending PartialStraightPipe
      extends Modelica.Fluid.Pipes.BaseClasses.PartialStraightPipe(
        final port_a_exposesState = (modelStructure == ModelStructure.av_b) or (modelStructure == ModelStructure.av_vb),
        final port_b_exposesState = (modelStructure == ModelStructure.a_vb) or (modelStructure == ModelStructure.av_vb));

      // extending PartialTwoPortFlow
      extends BaseClasses.PartialTwoPortFlow(
        final lengths=if n == 1 then 
                          {length} else 
                      if modelStructure == ModelStructure.av_vb then 
                          cat(1, {length/(n-1)/2}, fill(length/(n-1), n-2), {length/(n-1)/2}) else 
                      if modelStructure == ModelStructure.av_b then 
                          cat(1, {length/n/2}, fill(length*(1-1/n/2)/(n-1), n-1)) else 
                      if modelStructure == ModelStructure.a_vb then 
                          cat(1, fill(length*(1-1/n/2)/(n-1), n-1), {length/n/2}) else 
                          fill(length/n, n),
        final crossAreas=fill(crossArea, n),
        final dimensions=fill(4*crossArea/perimeter, n),
        final roughnesses=fill(roughness, n),
        final dheights=height_ab*dxs);

      // Wall heat transfer
      parameter Boolean use_HeatTransfer = false 
        "= true to use the HeatTransfer model";
      replaceable model HeatTransfer =
          Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.IdealFlowHeatTransfer
        constrainedby 
        Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.PartialFlowHeatTransfer 
        "Wall heat transfer";
      Interfaces.HeatPorts_a[nNodes] heatPorts if use_HeatTransfer;

      HeatTransfer heatTransfer(
        redeclare each final package Medium = Medium,
        final n=n,
        final nParallel=nParallel,
        final surfaceAreas=perimeter*lengths,
        final lengths=lengths,
        final dimensions=dimensions,
        final roughnesses=roughnesses,
        final states=mediums.state,
        final vs = vs,
        final use_k = use_HeatTransfer) "Heat transfer model";
      final parameter Real[n] dxs = lengths/sum(lengths);
    equation 
      Qb_flows = heatTransfer.Q_flows;
      // Wb_flow = v*A*dpdx + v*F_fric
      //         = v*A*dpdx + v*A*flowModel.dp_fg - v*A*dp_grav
      if n == 1 or useLumpedPressure then
        Wb_flows = dxs * ((vs*dxs)*(crossAreas*dxs)*((port_b.p - port_a.p) + sum(flowModel.dps_fg) - system.g*(dheights*mediums.d)))*nParallel;
      else
        if modelStructure == ModelStructure.av_vb or modelStructure == ModelStructure.av_b then
          Wb_flows[2:n-1] = {vs[i]*crossAreas[i]*((mediums[i+1].p - mediums[i-1].p)/2 + (flowModel.dps_fg[i-1]+flowModel.dps_fg[i])/2 - system.g*dheights[i]*mediums[i].d) for i in 2:n-1}*nParallel;
        else
          Wb_flows[2:n-1] = {vs[i]*crossAreas[i]*((mediums[i+1].p - mediums[i-1].p)/2 + (flowModel.dps_fg[i]+flowModel.dps_fg[i+1])/2 - system.g*dheights[i]*mediums[i].d) for i in 2:n-1}*nParallel;
        end if;
        if modelStructure == ModelStructure.av_vb then
          Wb_flows[1] = vs[1]*crossAreas[1]*((mediums[2].p - mediums[1].p)/2 + flowModel.dps_fg[1]/2 - system.g*dheights[1]*mediums[1].d)*nParallel;
          Wb_flows[n] = vs[n]*crossAreas[n]*((mediums[n].p - mediums[n-1].p)/2 + flowModel.dps_fg[n-1]/2 - system.g*dheights[n]*mediums[n].d)*nParallel;
        elseif modelStructure == ModelStructure.av_b then
          Wb_flows[1] = vs[1]*crossAreas[1]*((mediums[2].p - mediums[1].p)/2 + flowModel.dps_fg[1]/2 - system.g*dheights[1]*mediums[1].d)*nParallel;
          Wb_flows[n] = vs[n]*crossAreas[n]*((port_b.p - mediums[n-1].p)/1.5 + flowModel.dps_fg[n-1]/2+flowModel.dps_fg[n] - system.g*dheights[n]*mediums[n].d)*nParallel;
        elseif modelStructure == ModelStructure.a_vb then
          Wb_flows[1] = vs[1]*crossAreas[1]*((mediums[2].p - port_a.p)/1.5 + flowModel.dps_fg[1]+flowModel.dps_fg[2]/2 - system.g*dheights[1]*mediums[1].d)*nParallel;
          Wb_flows[n] = vs[n]*crossAreas[n]*((mediums[n].p - mediums[n-1].p)/2 + flowModel.dps_fg[n]/2 - system.g*dheights[n]*mediums[n].d)*nParallel;
        elseif modelStructure == ModelStructure.a_v_b then
          Wb_flows[1] = vs[1]*crossAreas[1]*((mediums[2].p - port_a.p)/1.5 + flowModel.dps_fg[1]+flowModel.dps_fg[2]/2 - system.g*dheights[1]*mediums[1].d)*nParallel;
          Wb_flows[n] = vs[n]*crossAreas[n]*((port_b.p - mediums[n-1].p)/1.5 + flowModel.dps_fg[n]/2+flowModel.dps_fg[n+1] - system.g*dheights[n]*mediums[n].d)*nParallel;
        else
          assert(true, "Unknown model structure");
        end if;
      end if;

      connect(heatPorts, heatTransfer.heatPorts);
    end DynamicPipe;

* * * * *

[Modelica.Fluid.Pipes.DynamicPipe.HeatTransfer] Modelica.Fluid.Pipes.DynamicPipe.HeatTransfer
=============================================================================================

Wall heat transfer

Parameters
----------

  ---------------------------------------------------------------------------
  Type                      Name                        Default Description
  ------------------------- --------------------------- ------- -------------
  Ambient                                                       

  CoefficientOfHeatTransfer k                           0       Heat transfer
                                                                coefficient
                                                                to ambient
                                                                [W/(m2.K)]

  Temperature               T_ambient                   system. Ambient
                                                        T_ambie temperature
                                                        nt      [K]

  Internal Interface                                            

  replaceable package       PartialMedium               Medium  
  Medium                                                in the  
                                                        compone 
                                                        nt      

  Integer                   n                           1       Number of
                                                                heat transfer
                                                                segments

  Boolean                   use_k                       false   = true to use
                                                                k value for
                                                                thermal
                                                                isolation

  Geometry                                                      

  Real                      nParallel                           number of
                                                                identical
                                                                parallel flow
                                                                devices
  ---------------------------------------------------------------------------

Connectors
----------

  -------------------------------------------------------------------------
  Type                                          Name     Description
  --------------------------------------------- -------- ------------------
  HeatPorts_a                                   heatPort Heat port to
                                                s[n]     component boundary
  -------------------------------------------------------------------------

Modelica definition
-------------------

    replaceable model HeatTransfer =
        Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.IdealFlowHeatTransfer
      constrainedby 
      Modelica.Fluid.Pipes.BaseClasses.HeatTransfer.PartialFlowHeatTransfer 
      "Wall heat transfer";

* * * * *

Automatically generated Fri Nov 12 16:31:13 2010.
